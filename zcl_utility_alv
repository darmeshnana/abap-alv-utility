CLASS zcl_utility_alv DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    CLASS-METHODS build_fieldcatalog
      IMPORTING
        !pi_alvdata        TYPE REF TO data
      RETURNING
        VALUE(pr_fieldcat) TYPE slis_t_fieldcat_alv .

    CLASS-METHODS display_alv
      IMPORTING
        !pi_layout        TYPE slis_vari  OPTIONAL
        !pi_sort1         TYPE lvc_fname  OPTIONAL
        !pi_sort2         TYPE lvc_fname  OPTIONAL
        !pi_sort3         TYPE lvc_fname  OPTIONAL
        !pi_repid         TYPE sy-repid   DEFAULT sy-repid
      CHANGING
        VALUE(pc_alvdata) TYPE table .

  PROTECTED SECTION.
  PRIVATE SECTION.
    CLASS-METHODS build_fieldcatalog_r
      IMPORTING
        !pi_component TYPE abap_componentdescr
      CHANGING
        pc_fieldcat TYPE slis_t_fieldcat_alv
        pc_callstack_id type I.
ENDCLASS.

CLASS ZCL_UTILITY_ALV IMPLEMENTATION.
  METHOD build_fieldcatalog.
*&---------------------------------------------------------------------*
* Translate ALV data table to Fieldcatalog.
*
* Accept reference to ALV data (internal table) as input and generate
* fieldcatalog data to be returned to the caller.
*
* Assumes the same data structure exists on all records.
*&---------------------------------------------------------------------*
    FIELD-SYMBOLS <alvdata> TYPE any.
    FIELD-SYMBOLS <fs_tab>  TYPE table.
    FIELD-SYMBOLS <fs_rec>  TYPE any.
    FIELD-SYMBOLS <fieldcat> LIKE LINE OF pr_fieldcat.

    DATA lv_callstack_id TYPE i VALUE 0.
    DATA lr_struct TYPE REF TO cl_abap_structdescr.
    DATA lr_table  TYPE REF TO cl_abap_tabledescr.

    ASSIGN pi_alvdata->* TO <alvdata>.  " de-reference input data structure
    CHECK sy-subrc = 0.

    TRY.
        lr_table ?= cl_abap_typedescr=>describe_by_data( <alvdata> ).

        ASSIGN pi_alvdata->* TO <fs_tab>.
        LOOP AT <fs_tab> ASSIGNING <fs_rec>.
          lr_struct ?= cl_abap_typedescr=>describe_by_data( <fs_rec> ).
          DATA(lt_components) = lr_struct->get_components( ).
          EXIT.  " Only need to check first table entry
        ENDLOOP.

        " For each component record build up field catalog entry
        LOOP AT lt_components INTO DATA(ls_component).
          build_fieldcatalog_r( EXPORTING pi_component    = ls_component
                                CHANGING  pc_fieldcat     = pr_fieldcat
                                          pc_callstack_id = lv_callstack_id ).
        ENDLOOP.

      CATCH cx_root.
        " Provided input is not an internal table

    ENDTRY.

    " Get the field labels (short/medium/long) from DD04T - data element texts
    IF not pr_fieldcat IS NOT INITIAL.
      SELECT rollname, scrtext_s, scrtext_m, scrtext_l FROM dd04t
        INTO TABLE @DATA(lt_dd04t)
        FOR ALL ENTRIES IN @pr_fieldcat
        WHERE rollname   = @pr_fieldcat-rollname
          AND ddlanguage = @sy-langu.
      SORT lt_dd04t BY rollname.

      LOOP AT pr_fieldcat ASSIGNING <fieldcat>.
        READ TABLE lt_dd04t INTO DATA(ls_dd04t) BINARY SEARCH
             WITH KEY rollname = <fieldcat>-rollname.
        IF sy-subrc = 0.
          <fieldcat>-seltext_s = ls_dd04t-scrtext_s.
          <fieldcat>-seltext_m = ls_dd04t-scrtext_m.
          <fieldcat>-seltext_l = ls_dd04t-scrtext_l.
        ENDIF.
        IF <fieldcat>-seltext_s IS INITIAL.
          <fieldcat>-seltext_s =  <fieldcat>-fieldname.
          <fieldcat>-seltext_m =  <fieldcat>-rollname.
          <fieldcat>-seltext_l =  <fieldcat>-rollname.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.

  METHOD build_fieldcatalog_r.
*&---------------------------------------------------------------------*
* Recursive method to support translating a component record into
* fieldcatalog data entry/entries
*&---------------------------------------------------------------------*
    DATA lr_struct TYPE REF TO cl_abap_structdescr.
    DATA ls_fieldcat TYPE slis_fieldcat_alv.

    pc_callstack_id = pc_callstack_id + 1.

    if PI_COMPONENT-AS_INCLUDE is initial.
      CLEAR ls_fieldcat.
      ls_fieldcat-col_pos   = pc_callstack_id.
      ls_fieldcat-fieldname = PI_COMPONENT-name.
      IF NOT PI_COMPONENT-type->is_ddic_type( ) IS INITIAL.
        ls_fieldcat-rollname = PI_COMPONENT-type->get_ddic_header( )-tabname.
      ELSE.
        ls_fieldcat-inttype  = PI_COMPONENT-type->type_kind.
        ls_fieldcat-intlen   = PI_COMPONENT-type->length.
        ls_fieldcat-decimals_out = PI_COMPONENT-type->decimals.
      ENDIF.
      INSERT ls_fieldcat INTO TABLE PC_FIELDCAT.

    else.
      lr_struct ?= PI_COMPONENT-TYPE.
      loop at lr_struct->get_components( ) into data(ls_component).
        " Recursive call for sub-structure
        build_fieldcatalog_r( exporting pi_component = ls_component                                                        
                               changing pc_fieldcat = PC_FIELDCAT
                                        pc_callstack_id = pc_callstack_id  ).
      endloop.
    endif.
  ENDMETHOD.

  METHOD display_alv.
    DATA: lr_alv       TYPE REF TO cl_salv_table,
      lr_columns   TYPE REF TO cl_salv_columns_table,
      lr_column    TYPE REF TO cl_salv_column,
      lr_functions TYPE REF TO cl_salv_functions_list,
      lr_display   TYPE REF TO cl_salv_display_settings,
      lr_layout    TYPE REF TO cl_salv_layout,
      lr_sorts     TYPE REF TO cl_salv_sorts,
      ls_key       TYPE salv_s_layout_key.

* Check to make sure the internal table has data.
    IF lines( pc_alvdata ) > 0.

      TRY.
* Create ALV instance
          CALL METHOD cl_salv_table=>factory
            IMPORTING
              r_salv_table = lr_alv
            CHANGING
              t_table      = pc_alvdata.

* Get functions object
          lr_functions = lr_alv->get_functions( ).

* Set all the functions
          lr_functions->set_all( ).

* Get column object
          lr_columns = lr_alv->get_columns( ).

* Optimize the columns
          lr_columns->set_optimize( ).

* Get sort column
          lr_sorts = lr_alv->get_sorts( ).
          lr_sorts->clear( ).

* Sort table
          IF pi_sort1 IS NOT INITIAL.
            lr_sorts->add_sort( columnname = pi_sort1 ).
          ENDIF.

          IF pi_sort2 IS NOT INITIAL.
            lr_sorts->add_sort( columnname = pi_sort2 ).
          ENDIF.

          IF pi_sort3 IS NOT INITIAL.
            lr_sorts->add_sort( columnname = pi_sort3 ).
          ENDIF.

* Get Layout
          lr_layout = lr_alv->get_layout( ).

          ls_key-report = pi_repid.
* Set Layout
          lr_layout->set_key( ls_key ).
          lr_layout->set_default( ' ' ).
          lr_layout->set_save_restriction( cl_salv_layout=>restrict_none ).

* if there is a layout from selection screen use it
          IF pi_layout IS NOT INITIAL.
            lr_layout->set_initial_layout( pi_layout ).
          ENDIF.

* Get Display setting
          lr_display = lr_alv->get_display_settings( ).
          lr_display->set_striped_pattern( cl_salv_display_settings=>true ).

* Display the ALV
          lr_alv->display( ).

        CATCH cx_salv_msg.
          WRITE: 'Error displaying grid CX_SALV_MSG!'.

        CATCH cx_salv_not_found.
          WRITE: 'Error displaying grid CX_SALV_NOT_FOUND!'.

        CATCH cx_salv_data_error.
          WRITE: 'Error displaying grid CX_SALV_DATA_ERROR!'.

        CATCH cx_salv_existing.
          WRITE: 'Error displaying grid CX_SALV_EXISTING!'.
      ENDTRY.

    ELSE.
      MESSAGE i008(z0). " No data selected
    ENDIF.

  ENDMETHOD.
ENDCLASS.
